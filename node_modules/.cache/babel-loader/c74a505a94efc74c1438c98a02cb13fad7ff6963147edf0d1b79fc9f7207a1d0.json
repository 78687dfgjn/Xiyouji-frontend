{"ast":null,"code":"import axios from 'axios';\nimport resCodeHandle from \"@/utils/resCodeHandle\";\nimport nprogress from \"nprogress\";\nimport \"nprogress/nprogress.css\";\nconst request = axios.create({\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上\n  // '/api'前缀在，页面里面写接口的时候就不要加 '/api'了，\n  // 否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  baseURL: 'http://8.138.10.52:6060'\n  //后端的星火有点慢，先不写了\n  // timeout: 12000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  // console.log(localStorage.getItem(\"token\"));\n  // const token = localStorage.getItem(\"token\")\n  const account = localStorage.getItem(\"accountData\") ? JSON.parse(localStorage.getItem(\"accountData\")) : null;\n  if (account) {\n    config.headers['token'] = account.token; // 设置请求头\n  }\n  nprogress.start();\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  nprogress.done();\n  let res = response.data;\n  // 如果是返回的文件\n  // if (response.config.responseType === 'blob') {\n  //     return res\n  // }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  resCodeHandle.codeHandle(res.code);\n\n  //因为设置了统一结果类，所以res.data才是数据本身\n  // res = res.data\n  return res;\n}, error => {\n  nprogress.done();\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","resCodeHandle","nprogress","request","create","baseURL","interceptors","use","config","headers","account","localStorage","getItem","JSON","parse","token","start","error","Promise","reject","response","done","res","data","codeHandle","code","console","log"],"sources":["D:/Soft/Java/repo/computer-design-contest-web/vue-project1/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport resCodeHandle from \"@/utils/resCodeHandle\";\r\nimport nprogress from \"nprogress\"\r\nimport \"nprogress/nprogress.css\"\r\n\r\nconst request = axios.create({\r\n    // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上\r\n    // '/api'前缀在，页面里面写接口的时候就不要加 '/api'了，\r\n    // 否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    baseURL: 'http://8.138.10.52:6060',\r\n    //后端的星火有点慢，先不写了\r\n    // timeout: 12000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    // console.log(localStorage.getItem(\"token\"));\r\n    // const token = localStorage.getItem(\"token\")\r\n    const account = localStorage.getItem(\"accountData\") ? JSON.parse(localStorage.getItem(\"accountData\")) : null\r\n    if (account) {\r\n        config.headers['token'] = account.token;  // 设置请求头\r\n    }\r\n    nprogress.start()\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        nprogress.done()\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        // if (response.config.responseType === 'blob') {\r\n        //     return res\r\n        // }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        resCodeHandle.codeHandle(res.code)\r\n\r\n        //因为设置了统一结果类，所以res.data才是数据本身\r\n        // res = res.data\r\n        return res;\r\n    },\r\n    error => {\r\n        nprogress.done()\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAO,yBAAyB;AAEhC,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzB;EACA;EACA;EACAC,OAAO,EAAE;EACT;EACA;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACAF,OAAO,CAACG,YAAY,CAACH,OAAO,CAACI,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjE;EACA;EACA,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,IAAI;EAC5G,IAAIF,OAAO,EAAE;IACTF,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,OAAO,CAACK,KAAK,CAAC,CAAE;EAC9C;EACAb,SAAS,CAACc,KAAK,CAAC,CAAC;EACjB,OAAOR,MAAM;AACjB,CAAC,EAAES,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAd,OAAO,CAACG,YAAY,CAACc,QAAQ,CAACb,GAAG,CAC7Ba,QAAQ,IAAI;EACRlB,SAAS,CAACmB,IAAI,CAAC,CAAC;EAChB,IAAIC,GAAG,GAAGF,QAAQ,CAACG,IAAI;EACvB;EACA;EACA;EACA;EACA;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGT,IAAI,CAACC,KAAK,CAACQ,GAAG,CAAC,GAAGA,GAAG;EACrC;EACArB,aAAa,CAACuB,UAAU,CAACF,GAAG,CAACG,IAAI,CAAC;;EAElC;EACA;EACA,OAAOH,GAAG;AACd,CAAC,EACDL,KAAK,IAAI;EACLf,SAAS,CAACmB,IAAI,CAAC,CAAC;EAChBK,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGV,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAed,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}